<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>报错Could not build wheels for Pillow, scikit-image, scipy的由来</title>
    <link href="/2024/06/04/Wheels%E6%8A%A5%E9%94%99%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <url>/2024/06/04/Wheels%E6%8A%A5%E9%94%99%E7%9A%84%E7%94%B1%E6%9D%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="报错“Could-not-build-wheels-for-Pillow-scikit-image-scipy”的由来"><a href="#报错“Could-not-build-wheels-for-Pillow-scikit-image-scipy”的由来" class="headerlink" title="报错“Could not build wheels for Pillow, scikit-image, scipy”的由来"></a>报错“Could not build wheels for Pillow, scikit-image, scipy”的由来</h1><p>这篇文章是对<a href="../%E6%95%B0%E5%AD%97%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C(%E4%BA%94)%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/index.html">数字内容安全实验（五）问题的解决</a>教程的进一步解释</p><p>有些人在执行指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./install.sh<br></code></pre></td></tr></table></figure><p>时，会出现报错：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Could not <span class="hljs-keyword">build </span>wheels for Pillow, <span class="hljs-keyword">scikit-image, </span><span class="hljs-keyword">scipy</span><br></code></pre></td></tr></table></figure><p>为什么会出现这种报错呢？<br>我们打开<code>requirements.txt</code>，可以看到：<br><img src="/img/20240604140524.png"></p><p>上面列出了所有需安装程序及其版本，而报错就是<code>install.sh</code>脚本在执行<code>pip install -r requirements.txt</code>指令时发生的。<br>而且该报错已经说明了，是在<strong>build wheels</strong> for <strong>Pillow, scikit-image, scipy</strong>时出现的错误<br>我们通过网站<a href="https://pypi.org/">https://pypi.org</a> 搜索：<br><img src="/img/20240604141137.png"></p><p>根据<code>requirement.txt</code>，查看[scikit-image0.12.3版本](<a href="https://pypi.org/project/scikit-image/0.12.3/#files">scikit-image · PyPI</a>)：<br><img src="/img/20240604141505.png"></p><p>因为问题出在Building wheels上，所以我们直接查看Built Distributions里的.whl文件：<br><img src="/img/20240604141913.png"><br>可以看到，所有的.whl文件的命名方式都是scikit_image-0.12.3-x-<strong>cpXX-cpXXm</strong>*.whl的形式。<br>在build wheels过程中出现了问题，也就是说对这个.whl文件处理的过程中出现了问题。<br>首先执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip debug --verbose<br></code></pre></td></tr></table></figure><p>可以查看你的平台支持的版本。<br>详见：<br><a href="https://blog.csdn.net/t18438605018/article/details/121769227">whl is not a supported wheel on this platform.解决办法-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41368074/article/details/116192766">安装scipy报错，疑似缺少wheel包，解决方案_failed to build scipy error: could not build wheel-CSDN博客</a></p><p>如果只按照上面网站的教程，下载对应的whl包重命名之后进行build，在后续的<code>python network.py</code>过程中仍会报错：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">ImportError: cannot import name <span class="hljs-symbol">&#x27;geometry</span>&#x27; from <span class="hljs-symbol">&#x27;skimage._shared</span><br><br>It seems that scikit-image has <span class="hljs-keyword">not</span> been built correctly.<br><br>Your install <span class="hljs-keyword">of</span> scikit-image appears to be broken.<br>Try re-installing the <span class="hljs-keyword">package</span> <span class="hljs-title">following the instructions at:</span><br>http://scikit-image.org/docs/stable/install.html <br><br></code></pre></td></tr></table></figure><p>这是个更加令人费解的错误，但是从中我们也能知道，“<strong>Your install of scikit-image appears to be broken.<strong>”<br>可能这就是按照上面的教程</strong>手动下载whl包改名后build</strong>的下场，极大概率就是由于：你用的平台的<strong>python版本过高</strong>，并不能正常完成build wheels的过程。</p><p>所以说根本的解决办法，还是<strong>创建一个兼容的python版本的环境</strong>。查看5年前的python版本以及进行后续试验后，我发现选用python3.6是最好（或许是唯一）的选择。而创建环境就需要使用到conda。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数字内容安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字内容安全实验（五）环境配置问题的解决</title>
    <link href="/2024/06/04/%E6%95%B0%E5%AD%97%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C(%E4%BA%94)%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/06/04/%E6%95%B0%E5%AD%97%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C(%E4%BA%94)%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>过时的python版本、过时的程序、过时的下载链接——这就是数字内容安全实验五。</p></blockquote><p>被数字内容安全实验五的<strong>环境搭建部分</strong>折磨一整天后，终于把遇到的问题一一解决。<br><em><del>为什么网安没有数字内容安全？希望下学期的网络安全治理给点力吧……</del></em><br>为了不让同学&#x2F;学弟学妹们被正常教学课程实验<strong>本不该出现的版本、过时问题</strong>，无缘无故浪费时间和精力，在此写一篇文章讲讲这些问题是如何解决的。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>主机环境：<strong>ubuntu22.04 LTS</strong>（VMware虚拟机）</p><p>项目的地址：<a href="https://github.com/liuyanqi/bitright">https://github.com/liuyanqi/bitright</a><br><del><em>一看是五年前的老项目，就有点害怕…</em></del></p><p>直接git clone到~目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/liuyanqi/bitright.git<br></code></pre></td></tr></table></figure><p><img src="/img/20240603161700.png"></p><p>文件Installation Guide.txt的指导<br><img src="/img/20240603161837.png"><br>如果是<strong>第一次运行</strong>：依次执行这两条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./install.sh<br>python network.py<br></code></pre></td></tr></table></figure><p><strong>如果是后续的运行</strong>：执行这一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./run.sh<br></code></pre></td></tr></table></figure><p><strong>但</strong>其实如果完全按照这个Guide执行两个脚本，绝大多数电脑（尤其是python3版本在3.10）都会遇到一堆报错，而且十分零碎，很难解决。<br>究其最根本的原因，还是<strong>所需python版本</strong>的问题。包括<strong>安装环境</strong>所需的python版本过时、<strong>运行程序</strong>所需的python版本过时，等等。</p><h2 id="source-x2F-install-sh命令"><a href="#source-x2F-install-sh命令" class="headerlink" title="source .&#x2F;install.sh命令"></a>source .&#x2F;install.sh命令</h2><p>打开install.sh：<br><img src="/img/20240603161924.png"><br>分成三个步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">!/bin/bash<br><br><span class="hljs-comment"># 安装virtualenv并开启虚拟环境</span><br>pip install virtualenv<br>virtualenv <span class="hljs-built_in">env</span><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">env</span><br><span class="hljs-built_in">source</span> bin/activate<br><br><span class="hljs-comment"># 安装requirement.txt上的程序</span><br>pip install -r ../requirements.txt<br><br><span class="hljs-comment"># 解压并安装tlsh</span><br>wget https://bitright.sfo2.digitaloceanspaces.com/tlsh.zip<br>unzip tlsh.zip<br><span class="hljs-built_in">cd</span> tlsh/py_ext<br>python setup.py install<br><br><span class="hljs-built_in">cd</span> ../../..<br></code></pre></td></tr></table></figure><p>最关键的就是这个install.sh的过程，我们分开说。</p><h3 id="安装virtualenv并开启虚拟环境"><a href="#安装virtualenv并开启虚拟环境" class="headerlink" title="安装virtualenv并开启虚拟环境"></a>安装virtualenv并开启虚拟环境</h3><p>先了解一下virtualenv是干什么的：<br><a href="https://blog.csdn.net/weixin_50503886/article/details/136693980">全网最最最详细的virtualenv的使用命令详解_virtualenv命令</a><br>关键信息：</p><ul><li>使用<code>virtualenv</code>可以创建一个隔离的Python环境</li><li>如果你的系统上安装了多个版本的Python，可以指定使用<strong>特定版本的Python</strong>创建虚拟环境</li></ul><p>所以说install.sh中的第一部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装virtualenv并开启虚拟环境</span><br>pip install virtualenv<br>virtualenv <span class="hljs-built_in">env</span><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">env</span><br><span class="hljs-built_in">source</span> bin/activate<br></code></pre></td></tr></table></figure><p>作用就是：<strong>安装virtualenv并开启env虚拟环境</strong><br>但是如果你此前运行过install.sh，就会发现此处env的激活命令，就是使用你安装的默认的python版本，也就是说如果你的系统的python3版本是python3.10，env就会创建python3.10的环境。</p><p>这样就肯定会产生报错，如果你在执行install.sh的过程中，遇到了诸如”<strong>Could not build wheels for Pillow, scikit-image, scipy</strong>“这种报错——问题就出于此处的版本设置。</p><ul><li>注：如果你想知道为什么这个报错是由于版本不兼容，可以查看<a href="../Wheels%E6%8A%A5%E9%94%99%E7%9A%84%E7%94%B1%E6%9D%A5/index.html">此处的解释</a>. 当然，也可以直接继续下面的内容。</li></ul><p>我们注意到：</p><blockquote><p>”如果<strong>你的系统上安装了多个版本的Python</strong>，可以指定使用特定版本的Python创建虚拟环境。“</p></blockquote><p>所以说如果你想要换python虚拟环境的版本，还要在系统上安装相应版本的Python，这显然非常繁琐，经过一番寻找，发现了完美的替代——<strong>Anaconda</strong>.</p><h3 id="将Virtualenv换成Anaconda"><a href="#将Virtualenv换成Anaconda" class="headerlink" title="将Virtualenv换成Anaconda"></a>将Virtualenv换成Anaconda</h3><p><strong>如果激活了env环境</strong>，<br>先关闭env环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">decativate<br></code></pre></td></tr></table></figure><p>然后直接删除<code>./env</code>目录即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ~/bitright/env<br></code></pre></td></tr></table></figure><p>接下来安装Anaconda<br>关于Anaconda的安装及配置，详见：<br><a href="https://blog.csdn.net/Alex_81D/article/details/135692506">【Conda】超详细的linux-conda环境安装教程_linux安装conda-CSDN博客</a><br>篇幅有限，只介绍安装后的使用。<br>成功配置后，你可以看到(base)字样：<br><img src="/img/20240603234819.png"><br>直接创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n python36 python3.6<br></code></pre></td></tr></table></figure><p>其中的python36是你设置的环境名称。</p><ul><li><em>如果这一步无法进行，试试<strong>conda换源</strong>。&#x3D;&#x3D;实测将~&#x2F;.condarc改为以下内容就可以&#x3D;&#x3D;：</em><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">channels<span class="hljs-punctuation">:</span><br>  - https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br>  - https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br>  - https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br>  - https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br>show_channel_urls<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><br>ssl_verify<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>allow_conda_downgrades<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><br></code></pre></td></tr></table></figure></li></ul><p>然后执行命令开启虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda init<br>conda activate python36<br></code></pre></td></tr></table></figure><p>看到在终端界面带有<code>(python36)</code>的字样，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> python3<br></code></pre></td></tr></table></figure><p>说明环境已经激活完成。</p><h3 id="安装requirement-txt上的程序"><a href="#安装requirement-txt上的程序" class="headerlink" title="安装requirement.txt上的程序"></a>安装requirement.txt上的程序</h3><p>install.sh的第二部分是安装requirement.txt上的程序。<br>打开requirement.txt：</p><p>可以看到需要用pip安装的程序及其版本。<br>直接运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirement.txt<br></code></pre></td></tr></table></figure><p>所需程序被一一安装。<br><strong>注意：如果这时候安装进度条是彩色的，说明python3.6的环境并没有真正启动，需要重新启动conda环境。正常情况下，安装进度条应该是白色的如下图：</strong><br><img src="/img/20240604130729.png"></p><h4 id="报错情况及处理"><a href="#报错情况及处理" class="headerlink" title="报错情况及处理"></a>报错情况及处理</h4><p>如果<strong>安装image-match时</strong>遇到报错：<br><img src="/img/20240604133357.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: Could not find a version that satisfies the requirement pytest-runner (from versions: none)<br></code></pre></td></tr></table></figure><p>直接安装pytest-runner即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pytest-runner<br></code></pre></td></tr></table></figure><p>同样地，如果<strong>安装scikit-image时</strong>遇到报错：<br><img src="/img/20240604133317.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: Could not find a version that satisfies the requirement cython&gt;=0.21 (from versions: none)<br>  ERROR: No matching distribution found <span class="hljs-keyword">for</span> cython&gt;=0.21<br></code></pre></td></tr></table></figure><p>直接安装cython即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install cython<br></code></pre></td></tr></table></figure><p>如果报错：<br><img src="/img/20240604113040.png"><br>按照说明，安装numpy即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install numpy<br></code></pre></td></tr></table></figure><p>如果报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RuntimeError: Broken toolchain: cannot <span class="hljs-built_in">link</span> a simple C program<br></code></pre></td></tr></table></figure><p><img src="/img/20240604105743.png"><br>一般是安装numpy时缺少gcc导致的，直接安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc<br></code></pre></td></tr></table></figure><p>遇到报错，修复完成后，重新运行<code>pip install -r requirements.txt</code>，再根据情况进行修复……这样一遍遍运行，耐心等待，到最后肯定可以顺利完成。<br>附上安装完成截图：<br><img src="/img/20240604144401.png"></p><h2 id="解压并安装tlsh"><a href="#解压并安装tlsh" class="headerlink" title="解压并安装tlsh"></a>解压并安装tlsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://bitright.sfo2.digitaloceanspaces.com/tlsh.zip<br>unzip tlsh.zip<br><span class="hljs-built_in">cd</span> tlsh/py_ext<br>python setup.py install<br></code></pre></td></tr></table></figure><p>这一步依旧是巨坑。运行过install.sh的同学肯定清楚，这里运行结果如图：</p><p>完全无法找到<a href="https://bitright.sfo2.digitaloceanspaces.com/tlsh.zip">https://bitright.sfo2.digitaloceanspaces.com/tlsh.zip</a> 里的文件。<br>依旧是<strong>过时</strong>的问题。<br>所以我们<strong>不能从他提供的网站里下载和安装tlsh.zip</strong><br>求助搜索引擎：<br><img src="/img/20240603200137.png"><br>原项目地址：<a href="https://github.com/trendmicro/tlsh">trendmicro&#x2F;tlsh (github.com)</a><br>根据原项目的安装教程，我们首先下载并解压文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/trendmicro/tlsh/archive/master.zip -O master.zip<br>unzip master.zip<br><span class="hljs-built_in">cd</span> tlsh-master<br></code></pre></td></tr></table></figure><p>然后再执行编译安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./make.sh<br></code></pre></td></tr></table></figure><ul><li>注意：此处需要你预先安装cmake，如果执行不成功，大概率是你还没有安装cmake：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install cmake<br>sudo apt install gcc<br>sudo apt install g++<br></code></pre></td></tr></table></figure></li></ul><p>编译完成<br><img src="/img/20240604145418.png"><br>然后安装py-tlsh包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install py-tlsh<br></code></pre></td></tr></table></figure><p>至此tlsh也成功安装。</p><h2 id="运行network-py"><a href="#运行network-py" class="headerlink" title="运行network.py"></a>运行network.py</h2><p>在执行完<code>source ./install.sh</code>后，接下来就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python network.py<br></code></pre></td></tr></table></figure><p>如果报错如：<br><img src="/img/20240604145535.png"><br>直接安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pyacoustid<br></code></pre></td></tr></table></figure><p>同样地，后续缺少什么module就pip下载对应的包，再重新<code>python network.py</code>即可。<br>如果遇到了这个报错：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">TypeError: <span class="hljs-built_in">__init__</span>() got an unexpected keyword argument <span class="hljs-string">&#x27;winmode&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240604145845.png"><br>可以看到，问题出在<code>chromaprint</code>上。<br>我们直接重新安装一下<code>chromaprint</code>即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install chromaprint<br></code></pre></td></tr></table></figure><p>安装所有所需模块后，再执行<code>python network.py</code> 正常情况下即可成功启动。</p><ul><li><em>注：关于报错“TypeError: <strong>init</strong>() got an unexpected keyword argument ‘winmode’”的详细解释，可以看<a href="">这里</a>。当然不看也不影响后续的过程</em></li></ul><p><img src="/img/20240604150443.png"><br>在虚拟机本机的浏览器中输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 并进入，或者直接在终端中打开链接：<br><img src="/img/20240604150808.png"><br>可以看到页面正常显示。此时你可以执行后续上传文件等操作，功能均正常。<br>可能速度会很慢，耐心等待。如果太慢或者无响应，就在终端Ctrl+C终止程序，再重新<code>python network.py</code>试试。</p><p><del>如果速度实在慢到无法忍受的话，我推荐你使用<a href="https://apps.microsoft.com/detail/9pn20msr04dw?hl=zh-cn&gl=U">WSL2的ubuntu系统</a>，而不是VMware workstation. 换成WSL的话，速度会变快很多倍，但是需要在WSL上面再配置一遍环境，不过WSL真的很好用……</del></p><p><em>另外，实验所需上传的文件就在~&#x2F;.bitright&#x2F;media目录里，尽情使用它们吧</em><br>至此，所有<strong>因为实验材料过时引发的不必要的问题</strong>已经解决。你可以继续进行实验。后续的实验过程很简单（使用这个网站的功能即可），也是课程要求的验证性实验的主要内容，因此不做赘述。</p><h2 id="对install-sh和run-sh的更改"><a href="#对install-sh和run-sh的更改" class="headerlink" title="对install.sh和run.sh的更改"></a>对install.sh和run.sh的更改</h2><p>由于我们进行了较大幅度的改动，过程中很多install.sh文件中的指令并未用到，以及run.sh中的指令也已经对我们不适用，所以为了<strong>后续启动环境</strong>的便利，还需要对这两个.sh文件进行更改。<br>注：以下操作均在~&#x2F;.bitright目录下进行</p><h3 id="修改install-sh"><a href="#修改install-sh" class="headerlink" title="修改install.sh"></a>修改install.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ./install.sh<br></code></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>pip install -r ./requirements.txt<br><span class="hljs-built_in">cd</span> tlsh-master/py_ext<br>python setup.py install<br><br></code></pre></td></tr></table></figure><h3 id="修改run-sh"><a href="#修改run-sh" class="headerlink" title="修改run.sh"></a>修改run.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ./run.sh<br></code></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>conda activate python36<br>python network.py<br><br></code></pre></td></tr></table></figure><p>这样，后续运行程序只需要执行run.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./run.sh<br></code></pre></td></tr></table></figure><p>就可以正常开启网站：<br><img src="/img/20240604153508.png"><br><img src="/img/20240604153708.png"></p><ul><li>注：在安装过程中如果仍有报错，执行install.sh，然后根据报错再作后续修改即可：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./install.sh<br></code></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写到最后还是想说，这些因为实验背景材料不充足、过时导致的不必要的问题，似乎不应该成为这项实验的主要内容。希望未来做该实验的同学们能够收到一份更加合理的实验说明、准备材料；希望学校未来的课程设计能够更精进、更合理、更人性化，向真正的计算机一流高校看齐吧。</p>]]></content>
    
    
    <categories>
      
      <category>课内</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字内容安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo框架的博客管理操作</title>
    <link href="/2023/03/24/hexo-manual/"/>
    <url>/2023/03/24/hexo-manual/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo框架下的博客操作"><a href="#Hexo框架下的博客操作" class="headerlink" title="Hexo框架下的博客操作"></a>Hexo框架下的博客操作</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实际上这篇文章应该在配好博客之后就写出来，然而<del>因为太懒</del>，因为种种原因，牧鱼人很久没有再关注他的博客。今天牧鱼人发现他连博客的基本操作都全忘记了，因此记录一下<strong>Hexo框架下博客管理的常用指令</strong>，防止自己再忘记。</p><h2 id="Hexo框架的常用命令"><a href="#Hexo框架的常用命令" class="headerlink" title="Hexo框架的常用命令"></a>Hexo框架的常用命令</h2><h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><pre><code class="hljs">hexo s</code></pre><p><strong>启动本地服务器</strong>，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p><ul><li><p><code>hexo s</code>是<code>hexo server</code>的缩写，命令效果一致；</p></li><li><p>预览的同时可以修改文章内容或主题代码，<strong>保存后刷新页面即可</strong>；</p></li><li><p>对 Hexo 根目录 _config.yml 的修改，需要<strong>重启本地服务器</strong>后才能预览效果。</p></li></ul><h3 id="hexo-n"><a href="#hexo-n" class="headerlink" title="hexo n"></a>hexo n</h3><pre><code class="hljs">hexo n &quot;学习笔记 八&quot;</code></pre><p>新建一篇标题为<code>学习笔记 八</code>的文章，<strong>因为标题里有空格，所以加上了引号</strong>。</p><ul><li><p>文章标题可以在对应<code>md</code>文件里改，新建时标题可以写的简单些；</p></li><li><p><code>hexo n</code>是<code>hexo new</code>的缩写，命令效果一致。</p></li></ul><h3 id="文章拥有的属性"><a href="#文章拥有的属性" class="headerlink" title="文章拥有的属性"></a>文章拥有的属性</h3><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>Layout</td><td>post或page</td></tr><tr><td><strong>title</strong></td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>创建日期</td><td>文件的创建日期</td></tr><tr><td>updated</td><td>修改日期</td><td>文件的修改日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td><strong>tags</strong></td><td>标签</td><td></td></tr><tr><td><strong>categories</strong></td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr></tbody></table><p>例如，如果我要创建一篇文章，在文章开头我可以加上如下属性：</p><pre><code class="hljs">---title: Fisherder的离散数学学习date: 2023-03-26 12:12:57updated: 2023-05-26 17:20categories: -离散数学tags:-离散数学及其应用-计算机数学comments: false---</code></pre><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><pre><code class="hljs">hexo d</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><ul><li><code>hexo d</code>是<code>hexo deploy</code>的缩写，命令效果一致。</li></ul><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><pre><code class="hljs">hexo clean</code></pre><p>**清除缓存文件<code>db.json</code>和已生成的静态文件<code>public</code>**。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><pre><code class="hljs">hexo g</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><ul><li>便于<strong>查看网站生成的静态文件或者手动部署网站</strong>；</li><li>如果使用自动部署，不需要先执行该命令；</li><li><code>hexo g</code>是<code>hexo generate</code>的缩写，命令效果一致。</li></ul><h3 id="hexo-n-page"><a href="#hexo-n-page" class="headerlink" title="hexo n page"></a>hexo n page</h3><pre><code class="hljs">hexo n page aboutme</code></pre><p>新建一个标题为<code>aboutme</code>的页面，默认链接地址为<code>主页地址/aboutme/</code></p><ul><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样可以随意修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ul><h3 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h3><pre><code class="hljs">hexo g &amp;&amp; hexo shexo g &amp;&amp; hexo d</code></pre><ul><li>可以为这两条命令设置一下快捷键</li></ul><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>草稿相当于很多博客都有的“私密文章”功能。</p><p><del>我猜f0那条博客就是用这种方式隐藏的</del></p><pre><code class="hljs">hexo new draft &quot;new draft&quot;</code></pre><p>会在<code>source/_drafts</code>目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><ul><li><p>如果你希望强行预览草稿，更改配置文件：</p><pre><code class="hljs">  render_drafts: true</code></pre></li><li><p>或者，如下方式启动server：</p><pre><code class="hljs">  hexo server --drafts</code></pre></li><li><p>下面这条命令可以把草稿变成文章，或者页面：</p><pre><code class="hljs">  hexo publish [layout] &lt;filename&gt;</code></pre></li></ul><p>常用的操作大概就这些，以后大概不至于不会改分类了…</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
